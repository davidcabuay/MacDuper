/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener(\"DOMContentLoaded\", () => {\n  const canvas = document.getElementById(\"game-canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  const itemArr = [{\n    name: 'screwdriver',\n    txt: 'I turn and twist, with a handle to grip, With screws I work to tighten or strip',\n    // img: 'https://picsum.photos/200/301',\n    img: '../src/scripts/screwdriver.png',\n    id: 0\n  }, {\n    name: 'copper wire',\n    txt: 'I am thin, I am red, Electricity, I carry ahead',\n    img: '../src/scripts/copperwire.png',\n    id: 1\n  }, {\n    name: 'sharpie',\n    txt: 'I am used for art, or just to jot, A permanent marker is what I get called a lot!',\n    img: '../src/scripts/sharpie.png',\n    id: 2\n  }, {\n    name: 'paper clip',\n    txt: 'Papers and notes, I keep in line, A humble helper all the time',\n    img: '../src/scripts/paperclip.png',\n    id: 3\n  }, {\n    name: 'paper',\n    txt: 'I am usually white but now I am scruched tight, I am the canvas you write on at night',\n    img: '../src/scripts/paper.png',\n    id: 4\n  }, {\n    name: 'toothpaste',\n    txt: 'I come in a tube, and i foam and I squirt, I keep your teeth clean and remove the dirt',\n    img: '../src/scripts/toothpaste.png',\n    id: 5\n  }, {\n    name: 'toothbrush',\n    txt: 'With bristles firm and clean, I keep your teeth serene',\n    img: '../src/scripts/toothbrush.png',\n    id: 6\n  }, {\n    name: 'quarter',\n    txt: 'I am round and shiny with a picture or two, In wallets and purses you can find my crew',\n    img: '../src/scripts/coin.png',\n    id: 7\n  }, {\n    name: 'tide pod',\n    txt: 'I have many colors, but I am not to eat, I am used for the laundry to clean your sheets',\n    img: '../src/scripts/tidepod.png',\n    id: 8\n  }, {\n    name: 'pizza',\n    txt: 'With cheese, sause and dough, I am complete, A favorite food you can not wait to eat',\n    img: '../src/scripts/pizza.png',\n    id: 9\n  }, {\n    name: 'loose thread',\n    txt: 'I am thin and long and can be spun, With needle and cloth I would not be undone',\n    img: '../src/scripts/thread.png',\n    id: 10\n  }, {\n    name: 'hotdog',\n    txt: 'I am long in a bun and often called a glizzy, you can eat me on the go whenever you are busy',\n    img: '../src/scripts/hotdog.png',\n    id: 11\n  },\n  // {\n  //     name: 'chapstick',\n  //     txt: 'chapstick',\n  //     img: '../src/scripts/chapstick.png',\n  //     id: 12\n  // },\n  {\n    name: 'clothespin',\n    txt: 'I am small and wooden, with two arms and a spring, I clip clothes to the line and let the breeze make them swing ,',\n    img: '../src/scripts/clothespin.png',\n    id: 13\n  }, {\n    name: 'comb',\n    txt: 'I have teeth that are fine and sturdy, I comb your hair to make you look thirty',\n    img: '../src/scripts/comb.png',\n    id: 14\n  }, {\n    name: 'feather',\n    txt: 'From birds I come to keep them warm, I am used for writing and decoration and even to peform',\n    img: '../src/scripts/feather.png',\n    id: 15\n  }, {\n    name: 'fork',\n    txt: 'I have tines that are sharp and slick, With me you eat, no chopsticks',\n    img: '../src/scripts/fork.png',\n    id: 16\n  }, {\n    name: 'gum',\n    txt: 'I am chewy and sticky, and I fight halitosis, I freshen your breath for your awaited kiss',\n    img: '../src/scripts/gum.png',\n    id: 17\n  }, {\n    name: 'pills',\n    txt: 'I am small and oblong and filled with surprise, With medicine or vitamins, I protect you from demise ',\n    img: '../src/scripts/pills.png',\n    id: 18\n  }, {\n    name: 'rubberband',\n    txt: 'I am stretchy and strong, and come in a band, I hold things together, under your command ',\n    img: '../src/scripts/rubberband.png',\n    id: 19\n  }, {\n    name: 'scissors',\n    txt: 'I have two blades, that can be used for trimming, I cut paper or fabric, do not use me for killing',\n    img: '../src/scripts/scissors.png',\n    id: 20\n  }, {\n    name: 'scrunchie',\n    txt: 'I am soft and stretchy, and come in a knot, I keep your hair back, to hide your bald spot',\n    img: '../src/scripts/scrunchie.png',\n    id: 21\n  }, {\n    name: 'spoon',\n    txt: 'I have a bowl, and a handle so long, if you think I am a fork then you are wrong',\n    img: '../src/scripts/spoon.png',\n    id: 22\n  }, {\n    name: 'spring',\n    txt: 'I am coiled and tight and made of metal, with tension and force stronger than a boiling kettle',\n    img: '../src/scripts/spring.png',\n    id: 23\n  }, {\n    name: 'thermometer',\n    txt: 'I measure heat and come in many forms, Like oral or ear, I am here to inform',\n    img: '../src/scripts/thermometer.png',\n    id: 24\n  }, {\n    name: 'wrench',\n    txt: 'I am a tool, that loosens and tightens, with nuts and bolts, then and again ',\n    img: '../src/scripts/wrench.png',\n    id: 25\n  }, {\n    name: 'pen',\n    txt: 'I have a point, that writes on paper, with a blob of ink, you are my maker ',\n    img: '../src/scripts/pen.png',\n    id: 26\n  }, {\n    name: 'brush',\n    txt: 'I have bristles, straight  and in angles, with the knots in your hair, I can help you de-tangle',\n    img: '../src/scripts/brush.png',\n    id: 27\n  }];\n  const list = document.querySelector(\"#reflist\");\n  const items = document.querySelector(\"#items\");\n  const startButton = document.querySelector('#initialize');\n  const restartButton = document.querySelector('#restart');\n  const itemHash = [];\n  const numItems = 5;\n  const listHash = [];\n  const foundItems = [];\n  const shuffled = itemArr.sort(() => Math.random() - 0.5);\n  function createList() {\n    for (let i = 0; i < numItems; i++) {\n      const listText = document.createElement(\"li\");\n      listText.setAttribute('class', \"listed\");\n      listText.setAttribute('data-id', shuffled[i].id);\n      listText.innerHTML = shuffled[i].txt;\n      listHash.push(listText);\n      list.append(listText);\n    }\n  }\n  const itemWidth = 50;\n  const itemHeight = 50;\n  const maxHeight = canvas.offsetHeight - itemHeight;\n  const maxWidth = canvas.offsetWidth - itemWidth;\n  const occupiedCoordinates = [];\n  const randomCoordinate = function () {\n    const x = Math.floor(Math.random() * maxWidth);\n    const y = Math.floor(Math.random() * maxHeight);\n    const r = [x, y];\n    if (occupiedCoordinates.some(coord => coord[0] < x + itemWidth && coord[0] + itemWidth > x && coord[1] < y + itemHeight && coord[1] + itemHeight > y)) {\n      return randomCoordinate();\n    }\n    occupiedCoordinates.push(r);\n    return r;\n  };\n  function createBoard() {\n    for (let i = 0; i < itemArr.length; i++) {\n      const xy = randomCoordinate();\n      const item = new Image();\n      item.src = itemArr[i].img;\n      item.addEventListener('load', function () {\n        ctx.drawImage(item, xy[0], xy[1], itemWidth, itemHeight);\n        // Add click event listener for each image\n        canvas.addEventListener(\"click\", function (e) {\n          // Check if the click was inside the image bounds\n          // console.log(e.x, xy[0], e.y, xy[1])\n          const rect = canvas.getBoundingClientRect();\n          const topDistance = Math.floor(rect.top);\n          const leftDistance = Math.floor(rect.left);\n          if (e.x - leftDistance >= xy[0] && e.x - leftDistance <= xy[0] + itemWidth && e.y - topDistance >= xy[1] && e.y - topDistance <= xy[1] + itemHeight) {\n            const id = itemArr[i].id;\n            console.log(id);\n            pickItem(id, itemArr[i]);\n          }\n        });\n      });\n    }\n  }\n  function pickItem(id, item) {\n    const matched = match(id);\n    // console.log(matched);\n    if (matched !== undefined) {\n      const listEntry = matched;\n      console.log(listEntry);\n      listEntry.className = \"found\";\n      foundItems.push(listEntry);\n      // item.removeEventListener('click', pickItem);\n    } else {\n      limit = limit - 2;\n    }\n  }\n  function match(id) {\n    let match = undefined;\n    // console.log(id + \" parameter id\");\n    listHash.forEach(ele => {\n      let listId = ele.getAttribute('data-id');\n      console.log(listId + \" list ID\");\n      console.log(id + \" parameter id\");\n      listId = listId;\n      if (parseInt(listId) === parseInt(id)) {\n        console.log(\"listID === parameter id\");\n        match = ele;\n      }\n    });\n    console.log(match);\n    return match;\n  }\n\n  // function createBoard(){\n  //     for(let i = 0; i<itemArr.length; i++){\n  //         const item = document.createElement(\"img\");\n  //         let xy = randomCoordinate();\n  //         console.log(xy)\n  //         // const item = new Image();\n  //         // item.src = itemArr[i].img\n  //         item.setAttribute(\"src\", itemArr[i].img);\n  //         item.setAttribute(\"data-id\", itemArr[i].id);\n  //         // item.className = \"item-image\";\n  //         item.style.height = 'auto';\n  //         item.style.width = 'auto';\n  //         item.style.maxHeight = '100px';\n  //         item.style.maxWidth = '100px';\n  //         item.style.top = xy[1] + \"px\";\n  //         item.style.left = xy[0] + \"px\";\n  //         itemHash.push(item);\n  //         item.addEventListener('click', pickItem);\n  //         // canvas.appendChild(item);\n  //         // ctx.drawImage(item, xy[0],xy[1])\n  //         items.append(item)\n  //     }\n  // }\n\n  // function pickItem(){\n  //     const matched = match(this);\n  //     if (matched!== undefined){\n  //         const listEntry = matched;\n  //         console.log(listEntry)\n  //         listEntry.className = \"found\";\n  //         foundItems.push(listEntry);\n  //         this.removeEventListener('click', pickItem);\n  //     }else{\n  //         limit = limit - 2\n\n  //     }\n\n  //     }\n\n  // function match(item){\n  //     let itemId = item.getAttribute('data-id')\n  //     let match = undefined\n  //     listHash.forEach(ele => {\n  //         let listId = ele.getAttribute('data-id')\n  //         if (listId === itemId){\n  //             console.log(ele)\n  //             match = ele\n\n  //         }\n  //     })\n  //     return match\n  // }\n\n  function startTimer(timeLimit) {\n    limit = timeLimit;\n    const t = setInterval(function () {\n      document.getElementById(\"timer\").innerHTML = limit;\n      limit--;\n      if (foundItems.length === listHash.length) {\n        clearInterval(t);\n        document.getElementById(\"timer\").innerHTML = \"YOU WON\";\n        startButton.innerHTML = \"START\";\n      } else if (limit < 0) {\n        clearInterval(t);\n        document.getElementById(\"timer\").innerHTML = \"GG\";\n        startButton.innerHTML = \"START\";\n      }\n    }, 1000);\n  }\n  restartButton.addEventListener('click', function () {\n    window.location.reload();\n    return false;\n  });\n  startButton.addEventListener('click', startGame);\n  function startGame() {\n    //remove the startscreen\n    //removechild\n    //coundown 3,2,1 print on screen before game start\n    createList();\n    createBoard();\n    setTimeout(startTimer(20), 3000);\n    startButton.removeEventListener('click', startGame);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYWNkdXBlci8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;